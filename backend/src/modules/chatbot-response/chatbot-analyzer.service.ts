import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { ChatbotResponse } from 'src/entities/ChatbotResponse';
import { UserInstructor } from 'src/entities/UserInstructor';
import { Course } from 'src/entities/Course';
import { Repository } from 'typeorm';
import { Enrollment, EnrollmentStatus } from 'src/entities/Enrollment';
import { Forum, ForumStatus } from 'src/entities/Forum';
import { Review } from 'src/entities/Review';
import { Quiz } from 'src/entities/Quiz';
import { Assignment } from 'src/entities/Assignment';
import { Certificate } from 'src/entities/Certificate';
import { Category } from 'src/entities/Category';
import { Document } from 'src/entities/Document';

@Injectable()
export class ChatbotAnalyzerService {
  constructor(
    @InjectRepository(Course)
    private courseRepo: Repository<Course>,
    @InjectRepository(UserInstructor)
    private instructorRepo: Repository<UserInstructor>,
    @InjectRepository(ChatbotResponse)
    private chatbotResponseRepo: Repository<ChatbotResponse>,
    @InjectRepository(Review)
    private reviewRepo: Repository<Review>,
    @InjectRepository(Quiz)
    private quizRepo: Repository<Quiz>,
    @InjectRepository(Assignment)
    private assignmentRepo: Repository<Assignment>,
    @InjectRepository(Certificate)
    private certificateRepo: Repository<Certificate>,
    @InjectRepository(Enrollment)
    private enrollmentRepo: Repository<Enrollment>,
    @InjectRepository(Forum)
    private forumRepo: Repository<Forum>,
    @InjectRepository(Category)
    private categoryRepo: Repository<Category>,
    @InjectRepository(Document)
    private documentRepo: Repository<Document>,
  ) {}

  async analyzeDatabaseAndGenerateResponses() {
    try {
      console.log('üîç Starting database analysis...');
      await this.analyzeCourses();
      await this.analyzeInstructors();
      await this.analyzeAssessments();
      await this.analyzeLearningProgress();
      await this.analyzeForums();
      await this.analyzeDocuments();
      await this.analyzeCategories();
      console.log('‚úÖ Analysis completed');
    } catch (error) {
      console.error('‚ùå Analysis error:', error);
      throw error;
    }
  }

  private async analyzeCourses() {
    try {
      // Get courses with their categories
      const courses = await this.courseRepo.find({
        relations: ['category'],
      });

      const courseKeywords = ['kh√≥a h·ªçc', 'danh s√°ch kh√≥a h·ªçc', 'h·ªçc nh·ªØng g√¨'];

      // Extract unique category names
      const categoryNames = [
        ...new Set(
          courses
            .filter((c) => c.category) // Filter out courses without category
            .map((c) => c.category.name),
        ),
      ];

      const courseResponse = {
        keywords: courseKeywords,
        response: `DNC cung c·∫•p ${courses.length} kh√≥a h·ªçc. C√°c kh√≥a h·ªçc ƒë∆∞·ª£c ph√¢n lo·∫°i th√†nh: ${categoryNames.join(', ')}`,
        category: 'course_list',
        confidence: 0.9,
      };

      await this.saveChatbotResponse(courseResponse);
    } catch (error) {
      console.error('‚ùå Error in analyzeCourses:', error);
      throw error;
    }
  }

  private async analyzeInstructors() {
    const instructors = await this.instructorRepo.find();

    const instructorResponse: Partial<ChatbotResponse> = {
      keywords: ['gi·∫£ng vi√™n', 'instructor', 'ng∆∞·ªùi d·∫°y'],
      response: `DNC c√≥ ${instructors.length} gi·∫£ng vi√™n. C√°c gi·∫£ng vi√™n ƒë·ªÅu l√† chuy√™n gia trong lƒ©nh v·ª±c c·ªßa m√¨nh.`,
      category: 'instructor_info',
      confidence: 0.9,
    };

    await this.saveChatbotResponse(instructorResponse);
  }

  private async analyzeStatistics() {
    // Ph√¢n t√≠ch v√† t·∫°o c√°c response v·ªÅ th·ªëng k√™
    const stats = await this.calculateSystemStats();
    await this.saveChatbotResponse({
      keywords: ['th·ªëng k√™', 's·ªë li·ªáu', 'statistics'],
      response: `Hi·ªán t·∫°i DNC c√≥:
                 - ${stats.totalCourses} kh√≥a h·ªçc
                 - ${stats.totalInstructors} gi·∫£ng vi√™n
                 - ${stats.totalStudents} h·ªçc vi√™n
                 - T·ª∑ l·ªá ho√†n th√†nh kh√≥a h·ªçc: ${stats.completionRate}%`,
      category: 'system_stats',
      confidence: 0.95,
    });
  }

  private async analyzeAssessments() {
    const quizzes = await this.quizRepo.find();
    const assignments = await this.assignmentRepo.find();

    await this.saveChatbotResponse({
      keywords: ['b√†i t·∫≠p', 'ki·ªÉm tra', 'quiz', 'assignment'],
      response: `DNC cung c·∫•p nhi·ªÅu h√¨nh th·ª©c ƒë√°nh gi√°:
- ${quizzes.length} b√†i ki·ªÉm tra (quiz)
- ${assignments.length} b√†i t·∫≠p
M·ªói kh√≥a h·ªçc c√≥ c√°c b√†i ki·ªÉm tra v√† b√†i t·∫≠p ri√™ng ƒë·ªÉ ƒë√°nh gi√° ti·∫øn ƒë·ªô h·ªçc t·∫≠p.`,
      category: 'assessments',
      confidence: 0.9,
    });
  }

  private async analyzeLearningProgress() {
    const enrollments = await this.enrollmentRepo.find();
    const certificates = await this.certificateRepo.find();
    const completedEnrollments = enrollments.filter(
      (e) => e.status === EnrollmentStatus.COMPLETED,
    );

    await this.saveChatbotResponse({
      keywords: ['ch·ª©ng ch·ªâ', 'ho√†n th√†nh', 'certificate', 'completion'],
      response: `T·∫°i DNC:
- ${enrollments.length} l∆∞·ª£t ƒëƒÉng k√Ω kh√≥a h·ªçc
- ${completedEnrollments.length} h·ªçc vi√™n ƒë√£ ho√†n th√†nh kh√≥a h·ªçc
- ${certificates.length} ch·ª©ng ch·ªâ ƒë√£ ƒë∆∞·ª£c c·∫•p
H·ªçc vi√™n s·∫Ω nh·∫≠n ƒë∆∞·ª£c ch·ª©ng ch·ªâ sau khi ho√†n th√†nh kh√≥a h·ªçc.`,
      category: 'learning_progress',
      confidence: 0.9,
    });
  }

  private async analyzeForums() {
    const forums = await this.forumRepo.find();
    const activeForums = forums.filter((f) => f.status === ForumStatus.ACTIVE);

    await this.saveChatbotResponse({
      keywords: ['di·ªÖn ƒë√†n', 'th·∫£o lu·∫≠n', 'forum', 'discussion'],
      response: `DNC c√≥ ${activeForums.length} di·ªÖn ƒë√†n th·∫£o lu·∫≠n ƒëang ho·∫°t ƒë·ªông.
H·ªçc vi√™n c√≥ th·ªÉ trao ƒë·ªïi, th·∫£o lu·∫≠n v√† ƒë·∫∑t c√¢u h·ªèi v·ªõi gi·∫£ng vi√™n v√† c√°c h·ªçc vi√™n kh√°c.`,
      category: 'forums',
      confidence: 0.85,
    });
  }

  private async analyzeCategories() {
    const categories = await this.categoryRepo.find();

    // Get courses count by category using left join
    const coursesByCategory = await this.courseRepo
      .createQueryBuilder('course')
      .leftJoin('course.category', 'category')
      .select('category.name', 'categoryName')
      .addSelect('COUNT(course.id)', 'count')
      .groupBy('category.name')
      .getRawMany();

    await this.saveChatbotResponse({
      keywords: [
        'danh m·ª•c',
        'lƒ©nh v·ª±c',
        'categories',
        'kh√≥a h·ªçc theo lƒ©nh v·ª±c',
      ],
      response: `DNC c√≥ ${categories.length} lƒ©nh v·ª±c ƒë√†o t·∫°o:
${coursesByCategory.map((c) => `- ${c.categoryName}: ${c.count} kh√≥a h·ªçc`).join('\n')}`,
      category: 'categories',
      confidence: 0.9,
    });
  }

  private async analyzeDocuments() {
    const documents = await this.documentRepo.find();
    const documentTypes = [...new Set(documents.map((d) => d.fileType))];

    await this.saveChatbotResponse({
      keywords: ['t√†i li·ªáu', 'document', 'learning materials'],
      response: `DNC cung c·∫•p ${documents.length} t√†i li·ªáu h·ªçc t·∫≠p.
C√°c ƒë·ªãnh d·∫°ng t√†i li·ªáu: ${documentTypes.join(', ')}.
T√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p trong t·ª´ng b√†i h·ªçc ƒë·ªÉ h·ªó tr·ª£ vi·ªác h·ªçc t·∫≠p.`,
      category: 'documents',
      confidence: 0.85,
    });
  }

  private async saveChatbotResponse(data: Partial<ChatbotResponse>) {
    try {
      const existing = await this.chatbotResponseRepo.findOne({
        where: { category: data.category },
      });

      if (existing) {
        const result = await this.chatbotResponseRepo.update(existing.id, {
          ...data,
          keywords: data.keywords, // TypeORM will handle JSON conversion
        });
        console.log(`‚úîÔ∏è Updated response for category: ${data.category}`);
        return result;
      } else {
        const result = await this.chatbotResponseRepo.save({
          ...data,
          keywords: data.keywords, // TypeORM will handle JSON conversion
        });
        console.log(`‚úîÔ∏è Created new response for category: ${data.category}`);
        return result;
      }
    } catch (error) {
      console.error(
        `‚ùå Error saving response for category ${data.category}:`,
        error,
      );
      throw error;
    }
  }

  // C√°c helper methods
  private analyzePriceRanges(courses: Course[]) {
    const prices = courses.map((c) => c.price);
    return {
      min: Math.min(...prices),
      max: Math.max(...prices),
      avg: prices.reduce((a, b) => a + b, 0) / prices.length,
    };
  }

  private analyzeSpecializations(instructors: UserInstructor[]) {
    return [...new Set(instructors.map((i) => i.specialization))];
  }

  private async calculateSystemStats() {
    // Implement system statistics calculation
    return {
      totalCourses: await this.courseRepo.count(),
      totalInstructors: await this.instructorRepo.count(),
      totalStudents: 0, // Implement actual count
      completionRate: 0, // Implement actual calculation
    };
  }
}
