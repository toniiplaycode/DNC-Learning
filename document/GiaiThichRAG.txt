1. Chuẩn bị dữ liệu (Data Preparation)
	A. Nguồn dữ liệu gốc (Raw Data Sources):
	Dữ liệu gốc (ví dụ: Khóa học, Danh mục, v.v.) được lưu trữ trong MySQL.
	B. Trích xuất thông tin (Information Extraction):
	Dữ liệu từ MySQL được truy xuất và xử lý (có thể làm sạch, chuẩn hóa, loại bỏ HTML, v.v.).
	C. Chia nhỏ dữ liệu (Chunking):
	Dữ liệu được chia thành các đoạn nhỏ (chunk) phù hợp (ví dụ: mỗi đoạn 200-500 từ).
	D. Biểu diễn vector (Embedding):
	Mỗi chunk được chuyển thành vector embedding bằng mô hình học máy (ví dụ: Sentence Transformers, OpenAI Embedding API(model text-embedding-ada-002), v.v.).
	E. Lưu trữ vào Qdrant (Vector Database):
	Các vector embedding cùng với metadata (ID, thông tin gốc, v.v.) được lưu vào Qdrant – một cơ sở dữ liệu vector chuyên dụng cho tìm kiếm tương tự.

2. Quy trình truy xuất và sinh câu trả lời (Retrieval Augmented Generation)
	1. Nhận truy vấn (Query):	
	Người dùng nhập câu hỏi hoặc truy vấn trên giao diện.
	2. Biểu diễn vector truy vấn (Query Embedding):
	Truy vấn được chuyển thành vector embedding bằng cùng mô hình đã dùng cho dữ liệu.
	3. Tìm kiếm top K dữ liệu liên quan (Top K Search in Qdrant):
	Vector truy vấn được gửi đến Qdrant để tìm top K vector gần nhất (tức là K đoạn dữ liệu liên quan nhất).
	Qdrant trả về các chunk dữ liệu cùng metadata (có thể chứa ID để đối chiếu lại dữ liệu gốc trong MySQL nếu cần).
	4. Tổng hợp dữ liệu liên quan (Relevant Data):
	Các chunk dữ liệu liên quan được tổng hợp lại, có thể truy xuất thêm thông tin chi tiết từ MySQL nếu chỉ lưu ID trong Qdrant.
	5. Sinh câu trả lời với LLM (LLM Generation):
	Các chunk dữ liệu liên quan cùng truy vấn gốc được đưa vào mô hình ngôn ngữ lớn (LLM) như GPT, để sinh ra câu trả lời tự nhiên, chính xác và có dẫn chứng.
	6. Trả về phản hồi (Response):
	Câu trả lời được trả về cho người dùng, có thể kèm theo trích dẫn nguồn hoặc đoạn dữ liệu gốc.

3. Lưu ý khi triển khai
	Qdrant giúp tìm kiếm nhanh các đoạn dữ liệu liên quan nhất nhờ tìm kiếm vector.
	Top K là số lượng kết quả liên quan nhất được lấy ra (ví dụ: top 3, top 5).
	MySQL vẫn là nơi lưu trữ dữ liệu gốc, Qdrant chỉ lưu vector và metadata.
	Có thể cần đồng bộ dữ liệu giữa MySQL và Qdrant khi cập nhật dữ liệu gốc.

4. Chatbot RAG phản hồi chưa tốt và chính xác do:
	1. Embedding không đủ tốt hoặc không phù hợp
	Nếu dùng model embedding không phù hợp với ngữ cảnh/ngôn ngữ (ví dụ: tiếng Việt nhưng dùng model tiếng Anh), việc tìm kiếm dữ liệu liên quan sẽ kém chính xác.
	Embedding chất lượng thấp sẽ khiến truy vấn và dữ liệu không “gần nhau” trong không gian vector, dẫn đến lấy sai thông tin.
	2. Chunking chưa hợp lý
	Nếu chia nhỏ dữ liệu (chunk) quá ngắn hoặc quá dài, thông tin truy xuất được sẽ không đủ ngữ cảnh hoặc bị loãng.
	Chunk không đúng ý nghĩa (cắt giữa câu, giữa đoạn) làm giảm chất lượng truy xuất.
	3. Dữ liệu trong Qdrant chưa đầy đủ hoặc chưa sạch
	Nếu dữ liệu gốc từ MySQL chưa được làm sạch, chuẩn hóa, hoặc thiếu thông tin, kết quả trả về sẽ không sát với truy vấn.
	Nếu dữ liệu cập nhật nhưng Qdrant chưa đồng bộ, sẽ lấy ra thông tin cũ hoặc sai.
	4. Tham số top K chưa tối ưu
	Nếu top K quá nhỏ, có thể bỏ lỡ thông tin liên quan.
	Nếu top K quá lớn, LLM sẽ bị “nhiễu” bởi nhiều thông tin không liên quan.
	5. LLM (mô hình ngôn ngữ lớn) không tận dụng tốt dữ liệu truy xuất
	Nếu prompt gửi vào LLM không rõ ràng, hoặc không “nhắc” LLM sử dụng đúng dữ liệu đã truy xuất, LLM có thể “bịa” hoặc trả lời chung chung.
	LLM có thể không hiểu hoặc không ưu tiên dữ liệu truy xuất, đặc biệt nếu dữ liệu không được format tốt khi đưa vào prompt.
	6. Ngôn ngữ 
	Nếu dữ liệu gốc và truy vấn không cùng ngôn ngữ, hoặc khác biệt về lĩnh vực, kết quả sẽ kém chính xác.